//-----------------------------------------------------
// Design Name : syn_fifo
// File Name   : syn_fifo.v
// Function    : Synchronous (single clock) FIFO
// Coder       : Deepak Kumar Tala
// Modifier	   : vantubk
//-----------------------------------------------------
module syn_fifo #(
	parameter DATA_WIDTH = 13,
	parameter ADDR_WIDTH = 13,
	parameter RAM_DEPTH = (1 << ADDR_WIDTH)
) (
	input                   clk, // Clock input
	input                   rst, // Active high reset
	input  [DATA_WIDTH-1:0] data_in, // Data input
	input                   rd_en, // Read enable
	input                   wr_en, // Write Enable
	// output reg [DATA_WIDTH-1:0] data_out, // Data Output
	output [DATA_WIDTH-1:0] data_out, // Data Output
	output                  empty, // FIFO empty
	output                  full      // FIFO full
);
	//-----------Internal variables-------------------
	reg  [ADDR_WIDTH-1:0] wr_pointer;
	reg  [ADDR_WIDTH-1:0] rd_pointer;
	reg  [ ADDR_WIDTH :0] status_cnt;
	wire [DATA_WIDTH-1:0] data_ram;
	//-----------Variable assignments---------------
	assign full  = (status_cnt == (RAM_DEPTH-1));
	assign empty = (status_cnt == 0);
	//-----------Code Start---------------------------
	always @ (posedge clk or posedge rst) begin : WRITE_POINTER
		if (rst) begin
			wr_pointer <= 0;
		end
		else if (wr_en) begin
			wr_pointer <= wr_pointer + 1;
		end
	end
	//
	always @ (posedge clk or posedge rst) begin : READ_POINTER
		if (rst) begin
			rd_pointer <= 0;
		end
		else if (rd_en) begin
			rd_pointer <= rd_pointer + 1;
		end
	end
	//
	// always  @ (posedge clk or posedge rst) begin : READ_DATA
	// 	if (rst) begin
	// 		data_out <= 0;
	// 	end
	// 	else if (rd_en ) begin
	// 		data_out <= data_ram;
	// 	end
	// end
	assign data_out = data_ram;
	//
	always @ (posedge clk or posedge rst) begin : STATUS_COUNTER
		if (rst) begin
			status_cnt <= 0;
			// Read but no write.
		end
		else if ((rd_en) && !(wr_en) && (status_cnt != 0)) begin
			status_cnt <= status_cnt - 1;
			// Write but no read.
		end
		else if ((wr_en) && !(rd_en) && (status_cnt != RAM_DEPTH)) begin
			status_cnt <= status_cnt + 1;
		end
	end
	//
	fifo_ram_dp # (DATA_WIDTH,ADDR_WIDTH) DP_RAM (
		.clk        (clk),
		.wr_pointer (wr_pointer),
		.data_in    (data_in),
		.wr_en      (wr_en),
		.rd_pointer (rd_pointer),
		.data_out   (data_ram),
		.rd_en      (rd_en)
	);
	//
endmodule
