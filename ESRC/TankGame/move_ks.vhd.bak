library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
--use std_logic_unsigned.all;
entity move_ks is
	port(
		b_up, b_down, b_left, b_right: in std_logic;
		clk: in std_logic;
		clk_50: in std_logic;
		tank_on: out std_logic;
		reset: in std_logic;
		tank_rgb: out std_logic_vector(11 downto 0)
		);
end move_ks;
architecture behave of move_ks is
signal row_reg, row_next: integer:=23; --range 0 to 31;
signal col_reg,  col_next: integer:=12; --range 0 to 23;
type maps_type is array (0 to 23,0 to 31) of integer range 0 to 4;
--signal: map_select map_type;
constant maps_1 : maps_type := 
	(
		(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
		(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,2,2,2,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,2,2,2,2,2,0,1),
		(1,2,2,2,0,0,0,2,2,2,2,2,0,0,2,2,2,2,2,0,2,2,0,0,0,2,2,2,2,2,0,1),
		(1,0,0,0,0,3,0,0,0,0,2,2,0,0,2,2,2,2,2,0,2,2,0,3,0,2,2,2,2,2,0,1),
		(1,0,0,0,0,3,0,0,0,0,2,2,0,0,2,2,2,2,2,0,2,2,0,3,0,0,0,0,0,0,0,1),
		(1,0,0,0,0,3,0,0,0,0,2,2,0,0,2,0,3,0,2,0,2,2,0,3,0,0,0,0,0,0,0,1),
		(1,0,0,0,3,3,3,3,0,0,0,0,0,0,3,3,3,3,3,0,2,2,0,3,3,3,3,0,0,0,0,1),
		(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,0,2,2,2,2,2,2,2,2,2,0,0,0,3,3,3,3,3,0,0,0,2,2,2,2,2,2,2,2,2,1),
		(1,0,2,2,2,2,2,2,2,2,2,0,0,0,3,3,3,3,3,0,2,0,2,2,2,2,2,2,2,2,2,1),
		(1,0,2,2,2,2,2,2,2,2,2,0,0,0,3,3,3,3,3,0,2,0,2,2,2,2,2,2,2,2,2,1),
		(1,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,3,0,0,0,2,0,0,0,0,2,0,0,0,0,0,1),
		(1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,2,0,0,0,0,0,1),
		(1,0,0,0,0,0,0,2,0,0,0,0,0,0,3,3,3,3,3,0,2,0,2,2,2,2,2,2,2,0,0,1),
		(1,0,2,0,0,0,0,2,0,0,2,0,0,0,3,3,3,3,3,0,2,0,0,2,0,0,0,0,0,0,0,1),
		(1,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1),
		(1,0,2,3,3,3,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1),
		(1,0,2,0,0,0,0,2,2,0,2,0,0,2,2,2,2,2,2,0,0,0,0,2,0,0,0,3,0,0,0,1),
		(1,0,2,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,3,0,0,0,1),
		(1,0,0,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,0,0,0,0,0,0,2,2,0,0,0,4,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)

	);
--type tanks_type is array (0 to 23,0 to 31) of integer range 0 to 1;
signal maps_reg,maps_next: maps_type; 
-- :=
	-- (
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
		-- (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
	-- );
		
begin
--	row_reg:=23;
--	col_reg:=12;
	--tank(row_reg,col_reg):= 1;
--	row_reg <= row_next;
--	col_reg <= col_next;
	process(clk_50)
	begin
		if (clk_50'event and clk_50 = '1') then
			maps_reg <= maps_1 when reset = '1' else
					maps_next;
	process(b_up,b_down,b_left,b_right,clk_50)
	begin
		if (clk_50'event and clk_50 = '1') then
			if(maps_reg(row_reg-1,col_reg)=0 and b_up='1') then
				row_next<=row_reg-1;
				col_next<=col_reg;
				maps_next(row_reg,col_reg)<= 0;
				maps_next(row_next,col_next)<=4;
			elsif(maps_reg(row_reg+1,col_reg)=0 and b_down='1') then
				row_next<=row_reg+1;
				col_next<=col_reg;
				maps_next(row_reg,col_reg)<=0;
				maps_next(row_next,col_next)<=4;
			elsif(maps_reg(row_reg,col_reg-1)=0 and b_left='1') then
				row_next<=row_reg;
				col_next<=col_reg-1;
				maps_next(row_reg,col_reg)<=0;
				maps_next(row_next,col_next)<=4;
			elsif(maps_reg(row_reg,col_reg+1)=0 and b_right='1') then
				row_next<=row_reg;
				col_next<=col_reg+1;
				maps_next(row_reg,col_reg)<=0;
				maps_next(row_next,col_next)<=4;
			end if;
		end if;
	end process;
	process(clk)
	begin
		if(clk_50'event and clk_50='1') then
			row_reg<=row_next;
			col_reg<=row_next;
		end if;
	end process;
	
	tank_on<='1' when maps_reg(row_reg,col_reg)=4 else '0';
	tank_rgb<="000000000100";-- when tank_on='1';
	
end behave;

	