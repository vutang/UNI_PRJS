library ieee;
use ieee.std_logic_1164.all;

entity buffer_move is
port (
	reset: in std_logic;
	clk: in std_logic;
	refr_tick: in std_logic;
	b_up,b_down: in std_logic;
	up_buf_active,down_buf_active: in std_logic;
	pixel_x,pixel_y: in std_logic_vector (9 downto 0)
);
end buffer_move;

architecture behavior of buffer_move is
signal up_buf_next, up_buf_reg: integer range 0 to 19;
signal down_buf_next, down_buf_reg: integer range 0 to 19;
signal col_t: integer range 0 to 31;
signal row_t: integer range 0 to 23;
process (clk)
	begin
	if (clk'event and clk = '1') then							
			up_buf_reg <= up_buf_next;
			down_buf_reg <= down_buf_next;
			
		end if;
	end process;
	process (refr_tick,b_up,b_down,reset)
	begin
		if (refr_tick'event and refr_tick = '1') then	
			if(reset = '1') then 
					up_buf_next <= 0;down_buf_next <= 0;
			elsif  (b_up = '1' and up_buf_active = '1') then -- up
				if (up_buf_reg = 19) then
					up_buf_next <= 0;
				else
					up_buf_next <= up_buf_reg + 1;
				end if;
			elsif  (b_down = '1' and down_buf_active = '1') then -- down
				if (down_buf_reg = 19) then
					down_buf_next <= 0;
				else
					down_buf_next <= down_buf_reg + 1;
				end if;
			end if;
		end if;
	end process;
	process (b_up,b_down)
	begin
		if (b_up = '1') then 
			col_t <= (conv_integer(pixel_x))/20;
			row_t <= (conv_integer(pixel_y)+up_buf_reg)/20;
		elsif (b_down = '1') then 
			col_t <= (conv_integer(pixel_x))/20;
			row_t <= (conv_integer(pixel_y)-up_buf_reg)/20;
		end if;
	end process;
end behavior;
	
	