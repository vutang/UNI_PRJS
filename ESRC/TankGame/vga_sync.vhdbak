LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;
ENTITY vga_sync IS
	PORT(
		clock_50,reset: IN STD_LOGIC;
		hsync,vsync: OUT STD_LOGIC;
		video_on,p_tick: OUT STD_LOGIC;
		pixel_x,pixel_y: OUT STD_LOGIC_VECTOR(9 DOWNTO 0)
		);
END vga_sync;

ARCHITECTURE arch OF vga_sync IS
	-- VGA 640-by-480 sync parameters
	CONSTANT HD: INTEGER:=640; --horizontal display area
	CONSTANT HF: INTEGER:=16 ; --h. front porch
	CONSTANT HB: INTEGER:=48 ; --h. back porch
	CONSTANT HR: INTEGER:=96 ; --h. retrace
	CONSTANT VD: INTEGER:=480; --vertical display area
	CONSTANT VF: INTEGER:=10 ; --v. front porch
	CONSTANT VB: INTEGER:=33 ; --v. back porch
	CONSTANT VR: INTEGER:=2  ; --v. retrace
	-- mod-2 counter
	SIGNAL mod2_reg, mod2_next: STD_LOGIC;
	-- sync counters
	SIGNAL v_count_reg, v_count_next: UNSIGNED(9 DOWNTO 0);
	SIGNAL h_count_reg, h_count_next: UNSIGNED(9 DOWNTO 0);
	-- output buffer
	SIGNAL v_sync_reg, h_sync_reg: STD_LOGIC;
	SIGNAL v_sync_next, h_sync_next: STD_LOGIC;
	-- status signal
	SIGNAL h_end, v_end, pixel_tick: STD_LOGIC;
BEGIN
	-- registers
	PROCESS(clock_50,reset)
	BEGIN
		IF reset='1' THEN
			mod2_reg <= '0';
			v_count_reg <= (others=>'0');
			h_count_reg <= (others=>'0');
			v_sync_reg <= '0';
			h_sync_reg <= '0';
		ELSIF (clock_50'event and clock_50='1') then
			mod2_reg <= mod2_next;
			v_count_reg <= v_count_next;
			h_count_reg <= h_count_next;
			v_sync_reg <= v_sync_next;
			h_sync_reg <= h_sync_next;
		END IF;
	END PROCESS;
	-- mod-2 circuit to generate 25 Mhz enable tick
	mod2_next <= NOT mod2_reg;
	-- 25 Mhz pixel tick
	pixel_tick <= '1' WHEN mod2_reg='1' ELSE '0';
	-- status
	h_end <= '1' WHEN h_count_reg=(HD+HF+HB+HR-1) ELSE --799
				'0';
	v_end <= '1' WHEN v_count_reg=(VD+VF+VB+VR-1) ELSE --499
				'0';
	-- mod-800 horizontal sync counter
	PROCESS(h_count_reg,h_end,pixel_tick)
	BEGIN
		IF pixel_tick='1' THEN -- 25 Mhz tick
			IF h_end='1' THEN
				h_count_next <= (others=>'0');
			ELSE
				h_count_next <= h_count_reg + 1;
			END IF;
		ELSE
			h_count_next <= h_count_reg;
		END IF;
	END PROCESS;
	-- mod-525 vertical sync counter
	PROCESS(v_count_reg,v_end,pixel_tick,h_end)
	BEGIN
		IF pixel_tick='1' AND h_end='1' THEN
			IF(v_end='1') THEN
				v_count_next <= (others=>'0');
			ELSE 
				v_count_next <= v_count_reg + 1;
			END IF;
		ELSE 
			v_count_next <= v_count_reg;
		END IF;
	END PROCESS;
	-- horizontal and vertical sync, buffered to avoid glitch
	h_sync_next <= 
		'1' WHEN (h_count_reg>=(HD+HF))           --656
			  AND (h_count_reg<=(HD+HF+HR-1)) ELSE -- 751
		'0';
	v_sync_next <= 
		'1' WHEN (v_count_reg>=(VD+VF))				--490
		     AND (v_count_reg<=(VD+VF+VR-1)) ELSE --491
		'0';
	-- video on/off
	video_on <=
		'1' WHEN (h_count_reg<HD) AND (v_count_reg<VD) ELSE
		'0';
	-- output signal 
	hsync <= h_sync_reg;
	vsync <= v_sync_reg;
	pixel_x <= STD_LOGIC_VECTOR(h_count_reg);
	pixel_y <= STD_LOGIC_VECTOR(v_count_reg);
	p_tick <= pixel_tick;
END arch;