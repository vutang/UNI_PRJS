library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
use ieee.numeric_std.all;

entity maps is
	port (
--		map_select      : in integer range 1 to 3;
		maps_on         : out std_logic;
		maps_rgb        : out std_logic_vector (11 downto 0);
		col             : in integer range 0 to 31;
		row             : in integer range 0 to 23;
		pixel_x,pixel_y : in std_logic_vector (9 downto 0);
		clk			  	: in std_logic;
		reset   	    : in std_logic;
		btn             : in std_logic;
		clk_db          : in std_logic
	);
end maps;

architecture behavior of maps is

--type obs_id is integer range 0 to 3;

signal address: std_logic_vector(8 downto 0);
signal brick_rgb,grass_rgb: std_logic_vector(11 downto 0);
signal col_next,col_reg: integer range 0 to 31;
signal row_next,row_reg: integer range 0 to 23;
signal up_buf_reg,up_buf_next: integer range 0 to 3;
type maps_type is array (0 to 23,0 to 31) of integer range 0 to 4;
signal maps_reg,maps_next: maps_type;
constant maps_1 : maps_type := 
	(
		(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
		(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,2,2,2,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,2,2,2,2,2,0,1),
		(1,2,2,2,0,0,0,2,2,2,2,2,0,0,2,2,2,2,2,0,2,2,0,0,0,2,2,2,2,2,0,1),
		(1,0,0,0,0,3,0,0,0,0,2,2,0,0,2,2,2,2,2,0,2,2,0,3,0,2,2,2,2,2,0,1),
		(1,0,0,0,0,3,0,0,0,0,2,2,0,0,2,2,2,2,2,0,2,2,0,3,0,0,0,0,0,0,0,1),
		(1,0,0,0,0,3,0,0,0,0,2,2,0,0,2,0,3,0,2,0,2,2,0,3,0,0,0,0,0,0,0,1),
		(1,0,0,0,3,3,3,3,0,0,0,0,0,0,3,3,3,3,3,0,2,2,0,3,3,3,3,0,0,0,0,1),
		(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,0,2,2,2,2,2,2,2,2,2,0,0,0,3,3,3,3,3,0,0,0,2,2,2,2,2,2,2,2,2,1),
		(1,0,2,2,2,2,2,2,2,2,2,0,0,0,3,3,3,3,3,0,2,0,2,2,2,2,2,2,2,2,2,1),
		(1,0,2,2,2,2,2,2,2,2,2,0,0,0,3,3,3,3,3,0,2,0,2,2,2,2,2,2,2,2,2,1),
		(1,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,3,0,0,0,2,0,0,0,0,2,0,0,0,0,0,1),
		(1,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,2,0,0,0,0,0,1),
		(1,0,0,0,0,0,0,2,0,0,0,0,0,0,3,3,3,3,3,0,2,0,2,2,2,2,2,2,2,0,0,1),
		(1,0,2,0,0,0,0,2,0,0,2,0,0,0,3,3,3,3,3,0,2,0,0,2,0,0,0,0,0,0,0,1),
		(1,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1),
		(1,0,2,3,3,3,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,1),
		(1,0,2,0,0,0,0,2,2,0,2,0,0,2,2,2,2,2,2,0,0,0,0,2,0,0,0,3,0,0,0,1),
		(1,0,2,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,3,0,0,0,1),
		(1,0,0,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,0,0,0,0,0,0,2,2,0,0,0,4,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1),
		(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)

	);
begin
	brick: entity work.brick_rom
	port map (
		address,clk,brick_rgb
	);
	grass: entity work.grass_rom
	port map (
		address,clk,grass_rgb
	);
	
	process (clk,up_buf_reg,reset,btn,row_reg,col_reg)
	begin
		if (clk'event and clk = '1') then
			if (reset = '1') then 
				maps_next <= maps_1;
				col_next <=	12;row_next <= 22;
				up_buf_next <= 0;
			else maps_reg<=maps_next;

				if (btn = '0' and maps_reg(row_reg - 1,col_reg) = 0) then
						if (up_buf_reg = 2) then 
							maps_next(row_reg - 1,col_reg) <= 4;
							maps_next(row_reg,col_reg) <= 0;
						end if;
						if (up_buf_reg = 3) then up_buf_next <= 0;
						else up_buf_next <= up_buf_reg +1;
						end if;

				end if;
			end if;
		end if;
	end process;
	process (clk_db)
	begin
		if (clk_db'event and clk_db = '1') then
			row_reg <= row_next;
			col_reg <= col_next;
			
			-- if (btn = '0' and maps_reg(row_reg - 1,col_reg) = 0 and reset = '0') then
				-- if (up_buf_reg = 3) then up_buf_next <= 0;
				-- else up_buf_next <= up_buf_reg + 1;
				-- end if;
			-- end if;	
		end if;
	end process;
	-- process (clk_db)
	-- begin
		-- if (clk_db'event and clk_db = '0') then
			-- up_buf_reg <= up_buf_next;
		-- end if;
	-- end process;
	address <= conv_std_logic_vector((conv_integer(pixel_y) - row*20)*20 + (conv_integer(pixel_x) - col*20),9);
	maps_on <= '1' when maps_reg(row,col) > 0;
	maps_rgb <= brick_rgb when maps_reg(row,col) = 1 else
			   grass_rgb when maps_reg(row,col) = 2 else
			   "110100000000" when maps_reg(row,col) = 3 else
			   "001100000000"when maps_reg(row,col) = 4 else
			   "000000000000";
end behavior;	
	
	
	
	
	
	
	
	