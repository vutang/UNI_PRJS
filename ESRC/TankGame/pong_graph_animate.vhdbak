LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;
ENTITY pong_graph_animate IS
	PORT(
		clock_50, reset: STD_LOGIC;
		btn: IN STD_LOGIC_VECTOR(1 DOWNTO 0);
		video_on: IN STD_LOGIC;
		pixel_x, pixel_y: IN STD_LOGIC_VECTOR(9 DOWNTO 0);
		graph_rgb: OUT STD_LOGIC_VECTOR(11 DOWNTO 0)
		);
END pong_graph_animate;

ARCHITECTURE arch OF pong_graph_animate IS
	SIGNAL refr_tick: STD_LOGIC;
	-- x,y coordinates (0,0) to (639,479)
	SIGNAL pix_x, pix_y: UNSIGNED(9 DOWNTO 0);
	CONSTANT MAX_X: INTEGER:=640;
	CONSTANT MAX_Y: INTEGER:=480;
	-- vertical stripe as a wall
	-- wall left, right boundary
	CONSTANT WALL_X_L: INTEGER:=32;
	CONSTANT WALL_X_R: INTEGER:=35;
	-- right paddle bar
	-- bar left, right boundary
	CONSTANT BAR_X_L: INTEGER:=600;
	CONSTANT BAR_X_R: INTEGER:=603;
	-- bar top, bottom boundary
	SIGNAL bar_y_t,bar_y_b: UNSIGNED(9 DOWNTO 0);
	CONSTANT BAR_Y_SIZE: INTEGER:=72;
	-- reg to track top boundary (x position is fixed)
	SIGNAL bar_y_reg, bar_y_next: UNSIGNED(9 DOWNTO 0);
	-- bar moving velocity when a button is pressed
	CONSTANT BAR_V: INTEGER:=4;
	
	-- square ball
	CONSTANT BALL_SIZE: INTEGER:=8;
	-- ball left,right boundary
	SIGNAL ball_x_l, ball_x_r: UNSIGNED(9 DOWNTO 0);
	-- ball top, bottom boundary
	SIGNAL ball_y_t, ball_y_b: UNSIGNED(9 DOWNTO 0);
	-- reg to track left, top boudnary
	SIGNAL ball_x_reg, ball_x_next: UNSIGNED(9 DOWNTO 0);
	SIGNAL ball_y_reg, ball_y_next: UNSIGNED(9 DOWNTO 0);
	-- reg to track ball speed
	SIGNAL x_delta_reg, x_delta_next: UNSIGNED(9 DOWNTO 0);
	SIGNAL y_delta_reg, y_delta_next: UNSIGNED(9 DOWNTO 0);
	-- ball velocity can be pos or neg
	CONSTANT BALL_V_P: UNSIGNED(9 DOWNTO 0):=TO_UNSIGNED(2,10);
	CONSTANT BALL_V_N: UNSIGNED(9 DOWNTO 0):=UNSIGNED(to_signed(-2,10));
	
	-- round ball image ROM
	TYPE rom_type IS ARRAY(0 TO 7)
		OF STD_LOGIC_VECTOR(0 TO 7);
	CONSTANT BALL_ROM: rom_type :=
	(
		"00111100",
		"01111110",
		"11111111",
		"11111111",
		"11111111",
		"11111111",
		"01111110",
		"00111100"
	);
	SIGNAL rom_addr, rom_col: UNSIGNED(2 DOWNTO 0);
	SIGNAL rom_data: STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL rom_bit: STD_LOGIC;
	-- object output signals
	SIGNAL wall_on, bar_on, sq_ball_on, rd_ball_on: STD_LOGIC;
	SIGNAL wall_rgb, bar_rgb,ball_rgb: STD_LOGIC_VECTOR(11 DOWNTO 0);
BEGIN
	-- register
	PROCESS(clock_50,reset)
	BEGIN
		IF reset='1' THEN
			bar_y_reg <= (others=>'0');
			ball_x_reg <= (others=>'0');
			ball_y_reg <= (others=>'0');
			x_delta_reg <= ("0000000100");
			y_delta_reg <= ("0000000100");
		ELSIF (clock_50'event AND clock_50='1') THEN
			bar_y_reg <= bar_y_next;
			ball_x_reg <= ball_x_next;
			ball_y_reg <= ball_y_next;
			x_delta_reg <= x_delta_next;
			y_delta_reg <= y_delta_next;
		END IF;
	END PROCESS;
	pix_x <= unsigned(pixel_x);
	pix_y <= unsigned(pixel_y);
	
	refr_tick <= '1' WHEN (pix_y=481) AND (pix_x=0) ELSE
					 '0';
	wall_on <= 
		'1' WHEN (WALL_X_L<=pix_x) AND (pix_x<=WALL_X_R) ELSE
		'0';
	wall_rgb <= "000000001111";
	-- right vertical bar
	-- boundary
	bar_y_t <= bar_y_reg;
	bar_y_b <= bar_y_t + BAR_Y_SIZE - 1;
	-- pixel within bar
	bar_on <=
		'1' WHEN (BAR_X_L<=pix_x) AND (pix_x<=BAR_X_R) AND
					(bar_y_t<=pix_y) AND (pix_y<=bar_y_b) ELSE
		'0';
	bar_rgb <= "000011110000";
	-- new bar y-position
	PROCESS(bar_y_reg,bar_y_b,bar_y_t,refr_tick,btn)
	BEGIN
		bar_y_next <= bar_y_reg; --no move
		IF refr_tick='1' THEN
			IF btn(1)='1' AND bar_y_b<(MAX_Y-1-BAR_V) THEN
				bar_y_next <= bar_y_reg + BAR_V; -- move down
			ELSIF btn(0)='1' AND bar_y_t > BAR_V THEN
				bar_y_next <= bar_y_reg - BAR_V; -- move up
			END IF;
		END IF;
	END PROCESS;
	-- square ball
	-- boundary
	ball_x_l <= ball_x_reg;
	ball_y_t <= ball_y_reg;
	ball_x_r <= ball_x_l + BALL_SIZE - 1;
	ball_y_b <= ball_y_t + BALL_SIZE - 1;
	-- pixel within ball
	sq_ball_on <= 
		'1' WHEN (ball_x_l<=pix_x) AND (pix_x<=ball_x_r) AND
					(ball_y_t<=pix_y) AND (pix_y<=ball_y_b) ELSE
		'0';
	
	-- map current pixel location to ROM addr/col
	rom_addr <= pix_y(2 DOWNTO 0) - ball_y_t(2 DOWNTO 0);
	rom_col <= pix_x(2 DOWNTO 0) - ball_x_l(2 DOWNTO 0);
	rom_data <= BALL_ROM(to_integer(rom_addr));
	rom_bit <= rom_data(to_integer(rom_col));
	-- pixel within ball
	rd_ball_on <= 
		'1' WHEN (sq_ball_on='1') AND (rom_bit='1') ELSE
		'0';
	-- ball rgb output
	ball_rgb <= "111100000000";
	-- new ball position
	ball_x_next <= ball_x_reg + x_delta_reg
							WHEN refr_tick='1' ELSE
						ball_x_reg;
	ball_y_next <= ball_y_reg + y_delta_reg
							WHEN refr_tick='1' ELSE
						ball_y_reg;
	-- new ball velocity
	PROCESS(x_delta_reg,y_delta_reg,ball_y_t,ball_y_b,ball_x_l,ball_x_r,bar_y_t,bar_y_b)
	BEGIN
		x_delta_next <= x_delta_reg;
		y_delta_next <= y_delta_reg;
		IF ball_y_t < 1 THEN -- reach top
			y_delta_next <= BALL_V_P;
		ELSIF ball_y_b > (MAX_Y-1) THEN -- reach bottom
			y_delta_next <= BALL_V_N;
		ELSIF ball_x_l <= WALL_X_R THEN -- reach wall
			x_delta_next <= BALL_V_P;
		ELSIF (BAR_X_L<=ball_x_r) AND (ball_x_r<=BAR_X_R) THEN
			IF(bar_y_t<=ball_y_b) AND (ball_y_t<=bar_y_b) THEN
				x_delta_next <= BALL_V_N;
			END IF;
		END IF;
	END PROCESS;
	
	-- rgb multiplexing circuit
	PROCESS(video_on,wall_on,bar_on,rd_ball_on,
			  wall_rgb, bar_rgb, ball_rgb)
	BEGIN
		IF video_on='0' THEN
			graph_rgb <= "000000000000";
		ELSE
			IF wall_on='1' THEN
				graph_rgb <= wall_rgb;
			ELSIF bar_on='1' THEN
				graph_rgb <= bar_rgb;
			ELSIF rd_ball_on='1' THEN
				graph_rgb <= ball_rgb;
			ELSE
				graph_rgb <= "111111110000";
			END IF;
		END IF;
	END PROCESS;
END arch;
		
			
			
	
		
	
	
	
	
	
	
	