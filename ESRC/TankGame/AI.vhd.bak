library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;
use work.data_maps.all;

entity AI is
	port(
		maps_AI: in maps_type;
		col: in integer range 0 to 31;
		row: in integer range 0 to 23;
		clk: in std_logic;
		clk_db: in std_logic;
		reset: in std_logic;
		pixel_x,pixel_y: in std_logic_vector(9 downto 0);
		dir, dir1, dir2: in std_logic_vector(1 downto 0);
		AI_on, AI1_on, AI2_on: out std_logic;
		AI_rgb: out std_logic_vector(11 downto 0);
		row_AI,row_AI1,row_AI2: out integer range 0 to 23;
		col_AI,col_AI1,col_AI2: out integer range 0 to 31
		);
end AI;

architecture behavior of AI is
	signal address: std_logic_vector(8 downto 0);
	signal tank_up_rgb,tank_down_rgb,tank_left_rgb,tank_right_rgb,tank_AI_rgb,tank1_AI_rgb,tank2_AI_rgb: std_logic_vector(11 downto 0);
	signal col_AI_next,col_AI_reg,col_AI_next1,col_AI_reg1,col_AI_next2,col_AI_reg2: integer range 0 to 31;
	signal row_AI_next,row_AI_reg,row_AI_next1,row_AI_reg1,row_AI_next2,row_AI_reg2: integer range 0 to 23;
	signal ena: std_logic;
begin
	tank_up: entity work.tank_up_rom
	port map (
		address,clk,tank_up_rgb
	);
	tank_down: entity work.tank_down_rom
	port map (
		address,clk,tank_down_rgb
		);
	tank_left_rom: entity work.tank_left_rom
	port map (
		address,clk,tank_left_rgb
		);
	tank_right_rom: entity work.tank_right_rom
	port map (
		address,clk,tank_right_rgb
		);
	clk_e: entity work.clk_ena
	port map (
		clock_50=>clk,
		ena=>ena
		);
		
	process (clk,ena)
	begin
		if (clk'event and clk = '1') then
			if (reset = '1') then 
				col_AI_next <= 1;
				row_AI_next <= 1;
				col_AI_next1 <= 9;
				row_AI_next1 <= 1;
				col_AI_next2 <= 15;
				row_AI_next2 <= 1;				
			else 
				if(ena='1') then
					case dir is					
						when "00" => 
										if(row_AI_reg > 1 and maps_AI(row_AI_reg-1,col_AI_reg) <= 1) then
											row_AI_next <= row_AI_reg - 1;
											col_AI_next <= col_AI_reg;
										end if;																						
						when "01" =>
										if(row_AI_reg < 22 and maps_AI(row_AI_reg+1,col_AI_reg) <=1 ) then
											row_AI_next <= row_AI_reg + 1;
											col_AI_next <= col_AI_reg;
										end if;																									
						when "10" =>
										if(col_AI_reg > 1 and maps_AI(row_AI_reg,col_AI_reg-1) <= 1) then
											row_AI_next <= row_AI_reg;
											col_AI_next <= col_AI_reg - 1;
										end if;																						
						when "11" =>
										if(col_AI_reg < 23 and maps_AI(row_AI_reg,col_AI_reg+1) <= 1) then
											row_AI_next <= row_AI_reg;
											col_AI_next <= col_AI_reg + 1;
										end if;																																										
					end case;
					case dir1 is
						when "00" =>
										if(row_AI_reg1 > 1 and  maps_AI(row_AI_reg1-1,col_AI_reg1) <= 1 ) then
												row_AI_next1 <= row_AI_reg1 - 1;
												col_AI_next1 <= col_AI_reg1;
										end if;
						when "01" =>
										if(row_AI_reg1 < 22 and maps_AI(row_AI_reg1+1,col_AI_reg1) <= 1) then
												row_AI_next1 <= row_AI_reg1 + 1;
												col_AI_next1 <= col_AI_reg1;
										end if;
						when "10" => 
										if(col_AI_reg1 > 1 and maps_AI(row_AI_reg1,col_AI_reg1-1) <= 1) then
												row_AI_next1 <= row_AI_reg1;
												col_AI_next1 <= col_AI_reg1 - 1;
										end if;
						when "11" =>
										if(col_AI_reg1 < 23 and maps_AI(row_AI_reg1,col_AI_reg1+1) <= 1) then
												row_AI_next1 <= row_AI_reg1;
												col_AI_next1 <= col_AI_reg1 + 1;
										end if;
					end case;
					case dir2 is
						when "00" =>
										if(row_AI_reg2 > 1 and maps_AI(row_AI_reg2-1,col_AI_reg2) <= 1) then
												row_AI_next2 <= row_AI_reg2 - 1;
												col_AI_next2 <= col_AI_reg2;
										end if;
						when "01" =>
										if(row_AI_reg2 < 22 and maps_AI(row_AI_reg2+1,col_AI_reg2) <= 1) then
												row_AI_next2 <= row_AI_reg2 + 1;
												col_AI_next2 <= col_AI_reg2;
										end if;
						when "10" =>
										if(col_AI_reg2 > 1 and maps_AI(row_AI_reg2,col_AI_reg2-1) <= 1) then
												row_AI_next2 <= row_AI_reg2;
												col_AI_next2 <= col_AI_reg2 - 1;
										end if;
						when "11" => 
										if(col_AI_reg2 < 23 and maps_AI(row_AI_reg2,col_AI_reg2+1) <= 1) then
												row_AI_next2 <= row_AI_reg2;
												col_AI_next2 <= col_AI_reg2 + 1;
										end if;	
					end case;
				end if;
			end if;
		end if;
	end process;
	
	process (clk_db)
	begin
		if (clk_db'event and clk_db = '1') then
			row_AI_reg <= row_AI_next;
			col_AI_reg <= col_AI_next;
			row_AI_reg1 <= row_AI_next1;
			col_AI_reg1 <= col_AI_next1;
			row_AI_reg2 <= row_AI_next2;
			col_AI_reg2 <= col_AI_next2;
		end if;
	end process;	
	process(dir,dir1,dir2)
	begin
		case dir is
			when "00" => tank_AI_rgb<=tank_up_rgb;
			when "01" => tank_AI_rgb<=tank_down_rgb;
			when "10" => tank_AI_rgb<=tank_left_rgb;
			when "11" => tank_AI_rgb<=tank_right_rgb;
		end case;		
		case dir1 is
			when "00" => tank1_AI_rgb<=tank_up_rgb;
			when "01" => tank1_AI_rgb<=tank_down_rgb;
			when "10" => tank1_AI_rgb<=tank_left_rgb;
			when "11" => tank1_AI_rgb<=tank_right_rgb;
		end case;
		case dir2 is
			when "00" => tank2_AI_rgb<=tank_up_rgb;
			when "01" => tank2_AI_rgb<=tank_down_rgb;
			when "10" => tank2_AI_rgb<=tank_left_rgb;
			when "11" => tank2_AI_rgb<=tank_right_rgb;
		end case;
	end process;
	row_AI <= row_AI_next;
	col_AI <= col_AI_next;
	row_AI1 <= row_AI_next1;
	col_AI1 <= col_AI_next1;
	row_AI2 <= row_AI_next2;
	col_AI2 <= col_AI_next2;
	address <= conv_std_logic_vector((conv_integer(pixel_y) - row*20)*20 + (conv_integer(pixel_x) - col*20),9);	
	AI_rgb <= 
			tank_AI_rgb  when (row = row_AI_next  and col = col_AI_next) else
			tank1_AI_rgb when (row = row_AI_next1 and col = col_AI_next1) else
			tank2_AI_rgb when (row = row_AI_next2 and col = col_AI_next2) else
			"000000000000";
end behavior;	
				
